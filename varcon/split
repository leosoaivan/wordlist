#!/usr/bin/perl

use strict;
use warnings;
use IO::Handle;

use varcon qw(%map);

my %F;

my %lists_pre;

# $cat = 'normal' or 'uncommon'
# $sp = spelling
# $vl = variant_level

open F, "varcon.txt";
while (<F>) {
    #print;
    my %notes;
    my %r = varcon::flatten(varcon::readline($_,\%notes));
    my $cat = $notes{uncommon} ? 'uncommon' : 'normal';
    foreach my $k (sort keys %r) {
        #print ">>$k<<\n";
        my ($sp, $vl) = $k =~ /^(.)(.)?$/ or die;
        $vl = ' ' unless defined $vl;
        foreach my $word (@{$r{$k}}) {
            $lists_pre{$cat}{$sp}{$vl}{$word}++;
        }
    }
}

my %lists;

foreach my $cat (sort keys %lists_pre) {
    foreach my $sp (sort keys %{$lists_pre{$cat}}) {
        my %already_have;
        foreach my $vl (sort keys %{$lists_pre{$cat}{$sp}}) {
            foreach my $word (keys %{$lists_pre{$cat}{$sp}{$vl}}) {
                next if $already_have{$word};
                $already_have{$word}++;
                push @{$lists{$sp}{$vl}}, $word;
            }
        }
    }
}

foreach my $sp (sort keys %lists) {
    my %already_have;
    foreach my $vl (sort keys %{$lists{$sp}}) {
        my $name = $map{$sp};
        $name .= "-v$vl" if $vl ne ' ';
        $name .= ".lst";
        my @words = sort @{$lists{$sp}{$vl}};
        open F, ">$name";
        my $prev = '';
        foreach (@words) {
            next if $_ eq $prev;
            $prev = $_;
            print F "$_\n";
        }
    }
}

